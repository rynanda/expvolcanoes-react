{
  "openapi": "3.0.3",
  "info": {
    "version": "2.0.0",
    "title": "Volcanoes around the world v2",
    "description": "This API has been created to support assignment three in CAB230, Web Computing. It exposes a number of REST endpoints which implement CRUD operations on a database containing publicly available data about volcanoes collated by the Smithsonian Institution's Global Volcanism Program. The API endpoints and their usage are described in detail below."
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "Enter JWT Bearer token **_only_**"
      }
    },
    "schemas": {
      "MissingCountryParameterVolcanoes": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": "true"
          },
          "message": {
            "type": "string",
            "example": "Country is a required query parameter."
          }
        }
      },
      "InvalidParametersVolcanoes": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": "true"
          },
          "message": {
            "type": "string",
            "example": "Invalid query parameters. Only country and populatedWithin are permitted."
          }
        }
      },
      "PageNotFound": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": "true"
          },
          "message": {
            "type": "string",
            "example": "Page not found!"
          }
        }
      },
      "VolcanoIdNotFound": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": "true"
          },
          "message": {
            "type": "string",
            "example": "Volcano with ID: 99999 not found."
          }
        }
      },
      "InvalidPopulatedWithinParameterVolcanoes": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": "true"
          },
          "message": {
            "type": "string",
            "example": "Invalid value for populatedWithin. Only: 5km,10km,30km,100km are permitted."
          }
        }
      },
      "InvalidParameters": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": "true"
          },
          "message": {
            "type": "string",
            "example": "Invalid query parameters. Query parameters are not permitted."
          }
        }
      },
      "MissingAuthHeader": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": "true"
          },
          "message": {
            "type": "string",
            "example": "Authorization header ('Bearer token') not found"
          }
        }
      },
      "TokenExpired": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": "true"
          },
          "message": {
            "type": "string",
            "example": "JWT token has expired"
          }
        }
      },
      "InvalidJWT": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": "true"
          },
          "message": {
            "type": "string",
            "example": "Invalid JWT token"
          }
        }
      },
      "MalformedAuthHeader": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": "true"
          },
          "message": {
            "type": "string",
            "example": "Authorization header is malformed"
          }
        }
      },
      "PublicProfile": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "mike@gmail.com"
          },
          "firstName": {
            "type": "string",
            "example": "Michael"
          },
          "lastName": {
            "type": "string",
            "example": "Jordan"
          }
        }
      },
      "AuthenticatedProfile": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "mike@gmail.com"
          },
          "firstName": {
            "type": "string",
            "example": "Michael"
          },
          "lastName": {
            "type": "string",
            "example": "Jordan"
          },
          "dob": {
            "type": "string",
            "example": "1963-02-17"
          },
          "address": {
            "type": "string",
            "example": "123 Fake Street, Springfield"
          }
        }
      },
      "InvalidProfileBodyFormat": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": "true"
          },
          "message": {
            "type": "string",
            "example": "Request body incomplete: firstName, lastName, dob and address are required."
          }
        }
      },
      "InvalidFirstNameLastNameAddressFormat": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": "true"
          },
          "message": {
            "type": "string",
            "example": "Request body invalid: firstName, lastName and address must be strings only."
          }
        }
      },
      "InvalidProfileDateFormat": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": "true"
          },
          "message": {
            "type": "string",
            "example": "Invalid input: dob must be a real date in format YYYY-MM-DD."
          }
        }
      },
      "InvalidProfileDate": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": "true"
          },
          "message": {
            "type": "string",
            "example": "Invalid input: dob must be a date in the past."
          }
        }
      },
      "InvalidRatingsBodyFormat": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": "true"
          },
          "message": {
            "type": "string",
            "example": "Request body incomplete: Rating is required."
          }
        }
      },
      "InvalidRatingFormat": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "example": "true"
          },
          "message": {
            "type": "string",
            "example": "Request body invalid: Rating must be a number between 0 and 5 (inclusive)."
          }
        }
      }
    }
  },
  "paths": {
    "/countries": {
      "get": {
        "tags": [
          "Data"
        ],
        "description": "Returns a list of all countries that are associated with one or more volcanoes, ordered alphabetically.",
        "responses": {
          "200": {
            "description": "An array of countries. An example of the first five elements in the array is shown below.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "Algeria",
                    "Antarctica",
                    "Argentina",
                    "Armenia",
                    "Australia"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": "true"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid query parameters. Query parameters are not permitted."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/volcanoes": {
      "get": {
        "tags": [
          "Data"
        ],
        "description": "Returns a list of volcanoes that are associated with the queried country. The country query parameter is required. The list can optionally be filtered by using the populatedWithin query parameter. This will return a filtered list of volcanoes that have at least one person living within the provided radius.",
        "parameters": [
          {
            "name": "country",
            "in": "query",
            "description": "Name of country",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "populatedWithin",
            "in": "query",
            "description": "Distance within X km of a volcano",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "5km",
                "10km",
                "30km",
                "100km"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An array of objects containing id, name, country, region and subregion properties. An example of one object in the array is shown below.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "example": "1"
                      },
                      "name": {
                        "type": "string",
                        "example": "Abu"
                      },
                      "country": {
                        "type": "string",
                        "example": "Japan"
                      },
                      "region": {
                        "type": "string",
                        "example": "Japan, Taiwan, Marianas"
                      },
                      "subregion": {
                        "type": "string",
                        "example": "Honshu"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing country query parameter or query parameters invalid. Click on 'Schema' below to see the possible error responses.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/MissingCountryParameterVolcanoes"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidParametersVolcanoes"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidPopulatedWithinParameterVolcanoes"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/volcano/{id}": {
      "get": {
        "tags": [
          "Data"
        ],
        "description": "Returns an object containing data for the queried volcano. If a valid JWT token is sent in the header of the request, population data for 5km, 10km, 30km and 100km is also provided. To test this using Swagger, click the green 'Authorize' button at the top of this page to enter your JWT token. A JWT token can be obtained by logging in. The path parameter (id) is required.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the volcano",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an object containing id, name, country, region, subregion, last eruption, summit, elevation, latitude and longitude data for the queried volcano. If a valid JWT token is sent in the header of the request, population data for 5km, 10km, 30km and 100km is also provided. An example of one object (with an authenticated request) is shown below.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 1
                    },
                    "name": {
                      "type": "string",
                      "example": "Abu"
                    },
                    "country": {
                      "type": "string",
                      "example": "Japan"
                    },
                    "region": {
                      "type": "string",
                      "example": "Japan, Taiwan, Marianas"
                    },
                    "subregion": {
                      "type": "string",
                      "example": "Honshu"
                    },
                    "last_eruption": {
                      "type": "string",
                      "example": "6850 BCE"
                    },
                    "summit": {
                      "type": "number",
                      "example": "641"
                    },
                    "elevation": {
                      "type": "number",
                      "example": "2103"
                    },
                    "latitude": {
                      "type": "string",
                      "example": "34.5000"
                    },
                    "longitude": {
                      "type": "string",
                      "example": "131.6000"
                    },
                    "population_5km": {
                      "type": "number",
                      "example": "3597"
                    },
                    "population_10km": {
                      "type": "number",
                      "example": "9594"
                    },
                    "population_30km": {
                      "type": "number",
                      "example": "117805"
                    },
                    "population_100km": {
                      "type": "number",
                      "example": "4071152"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/InvalidParameters"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Click on 'Schema' below to see the possible error responses.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/InvalidJWT"
                    },
                    {
                      "$ref": "#/components/schemas/TokenExpired"
                    },
                    {
                      "$ref": "#/components/schemas/MalformedAuthHeader"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Volcano ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/VolcanoIdNotFound"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/user/register": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "description": "Creates a new user account. A request body containing the user to be registered must be sent.",
        "requestBody": {
          "description": "An object containing the email and password of the user to be registered.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "mike@gmail.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "User created"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": "true"
                    },
                    "message": {
                      "type": "string",
                      "example": "Request body incomplete, both email and password are required"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "User already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": "true"
                    },
                    "message": {
                      "type": "string",
                      "example": "User already exists"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "description": "Log in to an existing user account. A request body containing the user credentials must be sent.",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "description": "The credentials of the user to log in.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "mike@gmail.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "password"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Log in successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "example": "ajsonwebtoken"
                    },
                    "token_type": {
                      "type": "string",
                      "example": "Bearer"
                    },
                    "expires_in": {
                      "type": "number",
                      "example": 86400
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid log in request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": "true"
                    },
                    "message": {
                      "type": "string",
                      "example": "Request body incomplete, both email and password are required"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Log in failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": "true"
                    },
                    "message": {
                      "type": "string",
                      "example": "Incorrect email or password"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/volcano/{id}/ratings": {
      "get": {
        "tags": [
          "Ratings"
        ],
        "description": "Returns an object containing reviews data for the queried volcano. The path parameter (id) is required.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the volcano",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an object containing averageRating and a reviews array (containing date, email, rating, and optional comment per review) for the queried volcano id provided in the path parameters. An example object is provided below. If a review does not have a comment, the comment field is not shown.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "averageRating": {
                      "type": "number",
                      "example": 3.3333333333333335
                    },
                    "reviews": {
                      "type": "array",
                      "example": [
                        {
                          "date": "Sun May 19 2024",
                          "email": "mike@example.com",
                          "rating": "5",
                          "comment": "Incredible view!"
                        },
                        {
                          "date": "Sun May 19 2024",
                          "email": "j.doe@example.com",
                          "rating": "1",
                          "comment": "Terrible view!"
                        },
                        {
                          "date": "Wed May 22 2024",
                          "email": "jim@hogan.com",
                          "rating": "4"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Volcano ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/VolcanoIdNotFound"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": "true"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid query parameters. Query parameters are not permitted."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Ratings"
        ],
        "description": "Rate and optionally comment on the queried volcano. The path parameter (id) is required. A request body containing a rating (0-5, inclusive) must be sent. Including a comment in the request body is optional. The user must be authenticated to review a volcano. To be authenticated, a valid JWT token must be sent in the header of the request. To test this using Swagger, click the green 'Authorize' button at the top of this page to enter your JWT token. A JWT token can be obtained by logging in.",
        "requestBody": {
          "description": "An object containing a rating (required) and comment (optional). Ratings must be between 0-5 (inclusive).",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "rating": {
                    "type": "number",
                    "example": "5"
                  },
                  "comment": {
                    "type": "string",
                    "example": "Breathtaking views!"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the volcano",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array of existing reviews (containing date, email, rating, and optional comment per review) for the queried volcano, with the user's review as the latest entry at the bottom. An example array is shown below. If a review does not have a comment, the comment field is not shown. The date field for a review is automatically generated. The email field for a review is generated by decoding the JWT token (if valid) sent in the header of the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "example": [
                    {
                      "date": "Sun May 19 2024",
                      "email": "mike@example.com",
                      "rating": "5",
                      "comment": "Incredible view!"
                    },
                    {
                      "date": "Sun May 19 2024",
                      "email": "j.doe@example.com",
                      "rating": "1",
                      "comment": "Terrible view!"
                    },
                    {
                      "date": "Wed May 22 2024",
                      "email": "jim@hogan.com",
                      "rating": "4"
                    },
                    {
                      "date": "Mon May 20 2024",
                      "email": "ryan@example.com",
                      "rating": "5",
                      "comment": "Breathtaking views!"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Click on 'Schema' below to see the possible error responses.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/InvalidRatingsBodyFormat"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidRatingFormat"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidParameters"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Click on 'Schema' below to see the possible error responses.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/MissingAuthHeader"
                    },
                    {
                      "$ref": "#/components/schemas/TokenExpired"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidJWT"
                    },
                    {
                      "$ref": "#/components/schemas/MalformedAuthHeader"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Volcano ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/VolcanoIdNotFound"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/user/{email}/profile": {
      "get": {
        "description": "Returns an object containing a user's profile information. The path parameter (email) is required and must be an email that has been registered. This route returns additional information if the user is authenticated. To be authenticated, a valid JWT token must be sent in the header of the request. To test this using Swagger, click the green 'Authorize' button at the top of this page to enter your JWT token. A JWT token can be obtained by logging in.",
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "Email address of a registered user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Profile"
        ],
        "responses": {
          "200": {
            "description": "An object containing email, firstName, lastName, address (authenticated only) and dob (authenticated only) properties. An example object for an authenticated request is shown below. If no profile information has been entered for the user via the profile PUT request route, all returned values except email are expected to be null. Click on 'Schema' below to see a response example for an unauthenticated request.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AuthenticatedProfile"
                    },
                    {
                      "$ref": "#/components/schemas/PublicProfile"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Click on 'Schema' below to see the possible error responses.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/TokenExpired"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidJWT"
                    },
                    {
                      "$ref": "#/components/schemas/MalformedAuthHeader"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": "true"
                    },
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "Updates a user's profile information. The path parameter (email) is required and must be an email that has been registered. A request body containing the user's profile information must be sent. This route returns an object containing the user's updated profile information. This route also requires the user to be authenticated - a valid JWT token must be sent in the header of the request. To test this route using Swagger, click the green 'Authorize' button at the top of this page to enter your JWT token. A JWT token can be obtained by logging in.",
        "requestBody": {
          "description": "An object containing the user's firstName, lastName, dob and address. firstName, lastName and address must be strings. dob must be a validate date string in the past matching the format YYYY-MM-DD. All key/value pairs are required.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string",
                    "example": "Michael"
                  },
                  "lastName": {
                    "type": "string",
                    "example": "Jordan"
                  },
                  "dob": {
                    "type": "string",
                    "example": "1963-02-17"
                  },
                  "address": {
                    "type": "string",
                    "example": "123 Fake Street, Springfield"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "description": "Email address of a registered user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Profile"
        ],
        "responses": {
          "200": {
            "description": "An object containing the user's updated profile information. The object should contain email, firstName, lastName, dob and address properties. An example object is shown below.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthenticatedProfile"
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Click on 'Schema' below to see the possible error responses.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/InvalidProfileBodyFormat"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidFirstNameLastNameAddressFormat"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidProfileDateFormat"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidProfileDate"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Click on 'Schema' below to see the possible error responses.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/MissingAuthHeader"
                    },
                    {
                      "$ref": "#/components/schemas/TokenExpired"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidJWT"
                    },
                    {
                      "$ref": "#/components/schemas/MalformedAuthHeader"
                    }
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Email address associated with JWT token is not the same as email provided in path parameter.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "boolean",
                      "example": "true"
                    },
                    "message": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/me": {
      "get": {
        "tags": [
          "Administration"
        ],
        "description": "A route to assist in automating some of the marking process for this assignment.",
        "responses": {
          "200": {
            "description": "An object containing your name and student number.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "Mike Wazowski"
                    },
                    "student_number": {
                      "type": "string",
                      "example": "n1234567"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}